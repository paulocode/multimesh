// Mocks generated by Mockito 5.4.6 from annotations
// in multimesh/test/providers/reconnector_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i2;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:multimesh/models/mesh_radio.dart' as _i3;
import 'package:multimesh/models/radio_connector_state.dart' as _i4;
import 'package:multimesh/providers/radio_connector_service.dart' as _i7;
import 'package:state_notifier/state_notifier.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSocket_0 extends _i1.SmartFake implements _i2.Socket {
  _FakeSocket_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTcpMeshRadio_1 extends _i1.SmartFake implements _i3.TcpMeshRadio {
  _FakeTcpMeshRadio_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TcpConnected].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockTcpConnected extends _i1.Mock implements _i4.TcpConnected {
  MockTcpConnected() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Socket get socket => (super.noSuchMethod(
        Invocation.getter(#socket),
        returnValue: _FakeSocket_0(
          this,
          Invocation.getter(#socket),
        ),
      ) as _i2.Socket);

  @override
  _i5.Stream<List<int>> get recvStream => (super.noSuchMethod(
        Invocation.getter(#recvStream),
        returnValue: _i5.Stream<List<int>>.empty(),
      ) as _i5.Stream<List<int>>);

  @override
  bool get isNewRadio => (super.noSuchMethod(
        Invocation.getter(#isNewRadio),
        returnValue: false,
      ) as bool);

  @override
  _i3.TcpMeshRadio get radio => (super.noSuchMethod(
        Invocation.getter(#radio),
        returnValue: _FakeTcpMeshRadio_1(
          this,
          Invocation.getter(#radio),
        ),
      ) as _i3.TcpMeshRadio);

  @override
  String get radioId => (super.noSuchMethod(
        Invocation.getter(#radioId),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#radioId),
        ),
      ) as String);

  @override
  _i4.Connected<_i3.MeshRadio> copyWith({
    bool? isNewRadio,
    _i3.TcpMeshRadio? radio,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #isNewRadio: isNewRadio,
            #radio: radio,
          },
        ),
        returnValue: _i6.dummyValue<_i4.Connected<_i3.MeshRadio>>(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #isNewRadio: isNewRadio,
              #radio: radio,
            },
          ),
        ),
      ) as _i4.Connected<_i3.MeshRadio>);
}

/// A class which mocks [TcpMeshRadio].
///
/// See the documentation for Mockito's code generation for more information.
class MockTcpMeshRadio extends _i1.Mock implements _i3.TcpMeshRadio {
  MockTcpMeshRadio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get address => (super.noSuchMethod(
        Invocation.getter(#address),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#address),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  String get remoteId => (super.noSuchMethod(
        Invocation.getter(#remoteId),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#remoteId),
        ),
      ) as String);
}

/// A class which mocks [RadioConnectorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRadioConnectorService extends _i1.Mock
    implements _i7.RadioConnectorService {
  MockRadioConnectorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Ref get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _i6.dummyValue<_i8.Ref>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i8.Ref);

  @override
  _i4.RadioConnectorState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i6.dummyValue<_i4.RadioConnectorState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.RadioConnectorState);

  @override
  set state(_i4.RadioConnectorState? newState) => super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.RadioConnectorState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i6.dummyValue<_i4.RadioConnectorState>(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i4.RadioConnectorState);

  @override
  _i5.Future<void> disconnect({String? errorMsg}) => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {#errorMsg: errorMsg},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> connect(_i3.MeshRadio? radio) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [radio],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void runBuild() => super.noSuchMethod(
        Invocation.method(
          #runBuild,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.RemoveListener listenSelf(
    void Function(
      _i4.RadioConnectorState?,
      _i4.RadioConnectorState,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValue: () {},
      ) as _i9.RemoveListener);

  @override
  bool updateShouldNotify(
    _i4.RadioConnectorState? previous,
    _i4.RadioConnectorState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}
