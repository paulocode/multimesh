// Mocks generated by Mockito 5.4.6 from annotations
// in multimesh/test/providers/radio_connector_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i4;
import 'dart:io' as _i3;
import 'dart:typed_data' as _i13;

import 'package:flutter_blue_plus/flutter_blue_plus.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:multimesh/models/mesh_radio.dart' as _i10;
import 'package:multimesh/models/radio_connector_state.dart' as _i9;
import 'package:multimesh/providers/ble/ble_radio_connector.dart' as _i12;
import 'package:multimesh/providers/tcp/tcp_radio_connector.dart' as _i6;
import 'package:multimesh/services/breadcrumb_logger.dart' as _i14;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i7;
import 'package:state_notifier/state_notifier.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDeviceIdentifier_0 extends _i1.SmartFake
    implements _i2.DeviceIdentifier {
  _FakeDeviceIdentifier_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternetAddress_1 extends _i1.SmartFake
    implements _i3.InternetAddress {
  _FakeInternetAddress_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEncoding_2 extends _i1.SmartFake implements _i4.Encoding {
  _FakeEncoding_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_3<T> extends _i1.SmartFake
    implements _i5.StreamSubscription<T> {
  _FakeStreamSubscription_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_4<T> extends _i1.SmartFake implements _i5.Future<T> {
  _FakeFuture_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TcpRadioConnector].
///
/// See the documentation for Mockito's code generation for more information.
class MockTcpRadioConnector extends _i1.Mock implements _i6.TcpRadioConnector {
  MockTcpRadioConnector() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Ref get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _i8.dummyValue<_i7.Ref>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i7.Ref);

  @override
  _i9.RadioConnectorState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i8.dummyValue<_i9.RadioConnectorState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.RadioConnectorState);

  @override
  set state(_i9.RadioConnectorState? newState) => super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.RadioConnectorState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i8.dummyValue<_i9.RadioConnectorState>(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i9.RadioConnectorState);

  @override
  _i5.Future<void> connect(_i10.TcpMeshRadio? radio) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [radio],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> disconnect({String? errorMsg}) => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {#errorMsg: errorMsg},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void runBuild() => super.noSuchMethod(
        Invocation.method(
          #runBuild,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.RemoveListener listenSelf(
    void Function(
      _i9.RadioConnectorState?,
      _i9.RadioConnectorState,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValue: () {},
      ) as _i11.RemoveListener);

  @override
  bool updateShouldNotify(
    _i9.RadioConnectorState? previous,
    _i9.RadioConnectorState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [BleRadioConnector].
///
/// See the documentation for Mockito's code generation for more information.
class MockBleRadioConnector extends _i1.Mock implements _i12.BleRadioConnector {
  MockBleRadioConnector() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Ref get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _i8.dummyValue<_i7.Ref>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i7.Ref);

  @override
  _i9.RadioConnectorState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i8.dummyValue<_i9.RadioConnectorState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.RadioConnectorState);

  @override
  set state(_i9.RadioConnectorState? newState) => super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.RadioConnectorState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i8.dummyValue<_i9.RadioConnectorState>(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i9.RadioConnectorState);

  @override
  _i5.Future<void> disconnect({String? errorMsg}) => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {#errorMsg: errorMsg},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> connect(_i10.BleMeshRadio? radio) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [radio],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void runBuild() => super.noSuchMethod(
        Invocation.method(
          #runBuild,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.RemoveListener listenSelf(
    void Function(
      _i9.RadioConnectorState?,
      _i9.RadioConnectorState,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValue: () {},
      ) as _i11.RemoveListener);

  @override
  bool updateShouldNotify(
    _i9.RadioConnectorState? previous,
    _i9.RadioConnectorState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [BluetoothDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothDevice extends _i1.Mock implements _i2.BluetoothDevice {
  MockBluetoothDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DeviceIdentifier get remoteId => (super.noSuchMethod(
        Invocation.getter(#remoteId),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#remoteId),
        ),
      ) as _i2.DeviceIdentifier);

  @override
  String get platformName => (super.noSuchMethod(
        Invocation.getter(#platformName),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#platformName),
        ),
      ) as String);

  @override
  String get advName => (super.noSuchMethod(
        Invocation.getter(#advName),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#advName),
        ),
      ) as String);

  @override
  List<_i2.BluetoothService> get servicesList => (super.noSuchMethod(
        Invocation.getter(#servicesList),
        returnValue: <_i2.BluetoothService>[],
      ) as List<_i2.BluetoothService>);

  @override
  bool get isAutoConnectEnabled => (super.noSuchMethod(
        Invocation.getter(#isAutoConnectEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  bool get isDisconnected => (super.noSuchMethod(
        Invocation.getter(#isDisconnected),
        returnValue: false,
      ) as bool);

  @override
  _i5.Stream<_i2.BluetoothConnectionState> get connectionState =>
      (super.noSuchMethod(
        Invocation.getter(#connectionState),
        returnValue: _i5.Stream<_i2.BluetoothConnectionState>.empty(),
      ) as _i5.Stream<_i2.BluetoothConnectionState>);

  @override
  int get mtuNow => (super.noSuchMethod(
        Invocation.getter(#mtuNow),
        returnValue: 0,
      ) as int);

  @override
  _i5.Stream<int> get mtu => (super.noSuchMethod(
        Invocation.getter(#mtu),
        returnValue: _i5.Stream<int>.empty(),
      ) as _i5.Stream<int>);

  @override
  _i5.Stream<void> get onServicesReset => (super.noSuchMethod(
        Invocation.getter(#onServicesReset),
        returnValue: _i5.Stream<void>.empty(),
      ) as _i5.Stream<void>);

  @override
  _i5.Stream<_i2.BluetoothBondState> get bondState => (super.noSuchMethod(
        Invocation.getter(#bondState),
        returnValue: _i5.Stream<_i2.BluetoothBondState>.empty(),
      ) as _i5.Stream<_i2.BluetoothBondState>);

  @override
  _i5.Stream<bool> get isDiscoveringServices => (super.noSuchMethod(
        Invocation.getter(#isDiscoveringServices),
        returnValue: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);

  @override
  _i2.DeviceIdentifier get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#id),
        ),
      ) as _i2.DeviceIdentifier);

  @override
  String get localName => (super.noSuchMethod(
        Invocation.getter(#localName),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#localName),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i5.Stream<_i2.BluetoothConnectionState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i5.Stream<_i2.BluetoothConnectionState>.empty(),
      ) as _i5.Stream<_i2.BluetoothConnectionState>);

  @override
  _i5.Stream<List<_i2.BluetoothService>> get servicesStream =>
      (super.noSuchMethod(
        Invocation.getter(#servicesStream),
        returnValue: _i5.Stream<List<_i2.BluetoothService>>.empty(),
      ) as _i5.Stream<List<_i2.BluetoothService>>);

  @override
  _i5.Stream<List<_i2.BluetoothService>> get services => (super.noSuchMethod(
        Invocation.getter(#services),
        returnValue: _i5.Stream<List<_i2.BluetoothService>>.empty(),
      ) as _i5.Stream<List<_i2.BluetoothService>>);

  @override
  void cancelWhenDisconnected(
    _i5.StreamSubscription<dynamic>? subscription, {
    bool? next = false,
    bool? delayed = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #cancelWhenDisconnected,
          [subscription],
          {
            #next: next,
            #delayed: delayed,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> connect({
    required _i2.License? license,
    Duration? timeout = const Duration(seconds: 35),
    int? mtu = 512,
    bool? autoConnect = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #license: license,
            #timeout: timeout,
            #mtu: mtu,
            #autoConnect: autoConnect,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> disconnect({
    int? timeout = 35,
    bool? queue = true,
    int? androidDelay = 2000,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {
            #timeout: timeout,
            #queue: queue,
            #androidDelay: androidDelay,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.BluetoothService>> discoverServices({
    bool? subscribeToServicesChanged = true,
    int? timeout = 15,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #discoverServices,
          [],
          {
            #subscribeToServicesChanged: subscribeToServicesChanged,
            #timeout: timeout,
          },
        ),
        returnValue: _i5.Future<List<_i2.BluetoothService>>.value(
            <_i2.BluetoothService>[]),
      ) as _i5.Future<List<_i2.BluetoothService>>);

  @override
  _i5.Future<int> readRssi({int? timeout = 15}) => (super.noSuchMethod(
        Invocation.method(
          #readRssi,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> requestMtu(
    int? desiredMtu, {
    double? predelay = 0.35,
    int? timeout = 15,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestMtu,
          [desiredMtu],
          {
            #predelay: predelay,
            #timeout: timeout,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> requestConnectionPriority(
          {required _i2.ConnectionPriority? connectionPriorityRequest}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestConnectionPriority,
          [],
          {#connectionPriorityRequest: connectionPriorityRequest},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setPreferredPhy({
    required int? txPhy,
    required int? rxPhy,
    required _i2.PhyCoding? option,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPreferredPhy,
          [],
          {
            #txPhy: txPhy,
            #rxPhy: rxPhy,
            #option: option,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> createBond({
    int? timeout = 90,
    _i13.Uint8List? pin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBond,
          [],
          {
            #timeout: timeout,
            #pin: pin,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> removeBond({int? timeout = 30}) => (super.noSuchMethod(
        Invocation.method(
          #removeBond,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearGattCache() => (super.noSuchMethod(
        Invocation.method(
          #clearGattCache,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> pair() => (super.noSuchMethod(
        Invocation.method(
          #pair,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [Socket].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocket extends _i1.Mock implements _i3.Socket {
  MockSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get port => (super.noSuchMethod(
        Invocation.getter(#port),
        returnValue: 0,
      ) as int);

  @override
  int get remotePort => (super.noSuchMethod(
        Invocation.getter(#remotePort),
        returnValue: 0,
      ) as int);

  @override
  _i3.InternetAddress get address => (super.noSuchMethod(
        Invocation.getter(#address),
        returnValue: _FakeInternetAddress_1(
          this,
          Invocation.getter(#address),
        ),
      ) as _i3.InternetAddress);

  @override
  _i3.InternetAddress get remoteAddress => (super.noSuchMethod(
        Invocation.getter(#remoteAddress),
        returnValue: _FakeInternetAddress_1(
          this,
          Invocation.getter(#remoteAddress),
        ),
      ) as _i3.InternetAddress);

  @override
  _i5.Future<dynamic> get done => (super.noSuchMethod(
        Invocation.getter(#done),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i13.Uint8List> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i5.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i5.Future<_i13.Uint8List>);

  @override
  _i5.Future<_i13.Uint8List> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i5.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i5.Future<_i13.Uint8List>);

  @override
  _i5.Future<_i13.Uint8List> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i5.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i5.Future<_i13.Uint8List>);

  @override
  _i4.Encoding get encoding => (super.noSuchMethod(
        Invocation.getter(#encoding),
        returnValue: _FakeEncoding_2(
          this,
          Invocation.getter(#encoding),
        ),
      ) as _i4.Encoding);

  @override
  set encoding(_i4.Encoding? _encoding) => super.noSuchMethod(
        Invocation.setter(
          #encoding,
          _encoding,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void destroy() => super.noSuchMethod(
        Invocation.method(
          #destroy,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool setOption(
    _i3.SocketOption? option,
    bool? enabled,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setOption,
          [
            option,
            enabled,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i13.Uint8List getRawOption(_i3.RawSocketOption? option) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRawOption,
          [option],
        ),
        returnValue: _i13.Uint8List(0),
      ) as _i13.Uint8List);

  @override
  void setRawOption(_i3.RawSocketOption? option) => super.noSuchMethod(
        Invocation.method(
          #setRawOption,
          [option],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Stream<_i13.Uint8List> asBroadcastStream({
    void Function(_i5.StreamSubscription<_i13.Uint8List>)? onListen,
    void Function(_i5.StreamSubscription<_i13.Uint8List>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i5.Stream<_i13.Uint8List>.empty(),
      ) as _i5.Stream<_i13.Uint8List>);

  @override
  _i5.StreamSubscription<_i13.Uint8List> listen(
    void Function(_i13.Uint8List)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_3<_i13.Uint8List>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i5.StreamSubscription<_i13.Uint8List>);

  @override
  _i5.Stream<_i13.Uint8List> where(bool Function(_i13.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i5.Stream<_i13.Uint8List>.empty(),
      ) as _i5.Stream<_i13.Uint8List>);

  @override
  _i5.Stream<S> map<S>(S Function(_i13.Uint8List)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);

  @override
  _i5.Stream<E> asyncMap<E>(
          _i5.FutureOr<E> Function(_i13.Uint8List)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i5.Stream<E>.empty(),
      ) as _i5.Stream<E>);

  @override
  _i5.Stream<E> asyncExpand<E>(
          _i5.Stream<E>? Function(_i13.Uint8List)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i5.Stream<E>.empty(),
      ) as _i5.Stream<E>);

  @override
  _i5.Stream<_i13.Uint8List> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i5.Stream<_i13.Uint8List>.empty(),
      ) as _i5.Stream<_i13.Uint8List>);

  @override
  _i5.Stream<S> expand<S>(Iterable<S> Function(_i13.Uint8List)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);

  @override
  _i5.Future<dynamic> pipe(
          _i5.StreamConsumer<_i13.Uint8List>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Stream<S> transform<S>(
          _i5.StreamTransformer<_i13.Uint8List, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);

  @override
  _i5.Future<_i13.Uint8List> reduce(
          _i13.Uint8List Function(
            _i13.Uint8List,
            _i13.Uint8List,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i5.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i5.Future<_i13.Uint8List>);

  @override
  _i5.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      _i13.Uint8List,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i8.ifNotNull(
              _i8.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i5.Future<S>.value(v),
            ) ??
            _FakeFuture_4<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
      ) as _i5.Future<S>);

  @override
  _i5.Future<String> join([String? separator = '']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i5.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> forEach(void Function(_i13.Uint8List)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> every(bool Function(_i13.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> any(bool Function(_i13.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i5.Stream<R>.empty(),
      ) as _i5.Stream<R>);

  @override
  _i5.Future<List<_i13.Uint8List>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i5.Future<List<_i13.Uint8List>>.value(<_i13.Uint8List>[]),
      ) as _i5.Future<List<_i13.Uint8List>>);

  @override
  _i5.Future<Set<_i13.Uint8List>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i5.Future<Set<_i13.Uint8List>>.value(<_i13.Uint8List>{}),
      ) as _i5.Future<Set<_i13.Uint8List>>);

  @override
  _i5.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _i8.ifNotNull(
              _i8.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i5.Future<E>.value(v),
            ) ??
            _FakeFuture_4<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
      ) as _i5.Future<E>);

  @override
  _i5.Stream<_i13.Uint8List> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i5.Stream<_i13.Uint8List>.empty(),
      ) as _i5.Stream<_i13.Uint8List>);

  @override
  _i5.Stream<_i13.Uint8List> takeWhile(bool Function(_i13.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i5.Stream<_i13.Uint8List>.empty(),
      ) as _i5.Stream<_i13.Uint8List>);

  @override
  _i5.Stream<_i13.Uint8List> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i5.Stream<_i13.Uint8List>.empty(),
      ) as _i5.Stream<_i13.Uint8List>);

  @override
  _i5.Stream<_i13.Uint8List> skipWhile(bool Function(_i13.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i5.Stream<_i13.Uint8List>.empty(),
      ) as _i5.Stream<_i13.Uint8List>);

  @override
  _i5.Stream<_i13.Uint8List> distinct(
          [bool Function(
            _i13.Uint8List,
            _i13.Uint8List,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i5.Stream<_i13.Uint8List>.empty(),
      ) as _i5.Stream<_i13.Uint8List>);

  @override
  _i5.Future<_i13.Uint8List> firstWhere(
    bool Function(_i13.Uint8List)? test, {
    _i13.Uint8List Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i5.Future<_i13.Uint8List>);

  @override
  _i5.Future<_i13.Uint8List> lastWhere(
    bool Function(_i13.Uint8List)? test, {
    _i13.Uint8List Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i5.Future<_i13.Uint8List>);

  @override
  _i5.Future<_i13.Uint8List> singleWhere(
    bool Function(_i13.Uint8List)? test, {
    _i13.Uint8List Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i5.Future<_i13.Uint8List>);

  @override
  _i5.Future<_i13.Uint8List> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i5.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i5.Future<_i13.Uint8List>);

  @override
  _i5.Stream<_i13.Uint8List> timeout(
    Duration? timeLimit, {
    void Function(_i5.EventSink<_i13.Uint8List>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i5.Stream<_i13.Uint8List>.empty(),
      ) as _i5.Stream<_i13.Uint8List>);

  @override
  void add(List<int>? data) => super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void write(Object? object) => super.noSuchMethod(
        Invocation.method(
          #write,
          [object],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeAll(
    Iterable<dynamic>? objects, [
    String? separator = '',
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAll,
          [
            objects,
            separator,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeln([Object? object = '']) => super.noSuchMethod(
        Invocation.method(
          #writeln,
          [object],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeCharCode(int? charCode) => super.noSuchMethod(
        Invocation.method(
          #writeCharCode,
          [charCode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<dynamic> addStream(_i5.Stream<List<int>>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStream,
          [stream],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}

/// A class which mocks [BreadcrumbLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreadcrumbLogger extends _i1.Mock implements _i14.BreadcrumbLogger {
  MockBreadcrumbLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> i(String? string) => (super.noSuchMethod(
        Invocation.method(
          #i,
          [string],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> w(String? string) => (super.noSuchMethod(
        Invocation.method(
          #w,
          [string],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> e(Object? e) => (super.noSuchMethod(
        Invocation.method(
          #e,
          [e],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  int anonymizeInt(int? value) => (super.noSuchMethod(
        Invocation.method(
          #anonymizeInt,
          [value],
        ),
        returnValue: 0,
      ) as int);

  @override
  List<int> anonymizeBytes(List<int>? bytes) => (super.noSuchMethod(
        Invocation.method(
          #anonymizeBytes,
          [bytes],
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  String anonymizeString(String? value) => (super.noSuchMethod(
        Invocation.method(
          #anonymizeString,
          [value],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #anonymizeString,
            [value],
          ),
        ),
      ) as String);

  @override
  _i5.Future<void> setEnabled(bool? telemetryEnabled) => (super.noSuchMethod(
        Invocation.method(
          #setEnabled,
          [telemetryEnabled],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool isEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isEnabled,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool canUploadLogs() => (super.noSuchMethod(
        Invocation.method(
          #canUploadLogs,
          [],
        ),
        returnValue: false,
      ) as bool);
}
