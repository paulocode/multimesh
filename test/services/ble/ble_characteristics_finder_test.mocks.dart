// Mocks generated by Mockito 5.4.6 from annotations
// in multimesh/test/services/ble/ble_characteristics_finder_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_reactive_ble/src/discovered_devices_registry.dart'
    as _i2;
import 'package:flutter_reactive_ble/src/reactive_ble.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:reactive_ble_platform_interface/reactive_ble_platform_interface.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDiscoveredDevicesRegistryImpl_0 extends _i1.SmartFake
    implements _i2.DiscoveredDevicesRegistryImpl {
  _FakeDiscoveredDevicesRegistryImpl_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCharacteristic_1 extends _i1.SmartFake
    implements _i3.Characteristic {
  _FakeCharacteristic_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FlutterReactiveBle].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterReactiveBle extends _i1.Mock
    implements _i3.FlutterReactiveBle {
  MockFlutterReactiveBle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DiscoveredDevicesRegistryImpl get scanRegistry => (super.noSuchMethod(
        Invocation.getter(#scanRegistry),
        returnValue: _FakeDiscoveredDevicesRegistryImpl_0(
          this,
          Invocation.getter(#scanRegistry),
        ),
      ) as _i2.DiscoveredDevicesRegistryImpl);

  @override
  _i4.Stream<_i5.BleStatus> get statusStream => (super.noSuchMethod(
        Invocation.getter(#statusStream),
        returnValue: _i4.Stream<_i5.BleStatus>.empty(),
      ) as _i4.Stream<_i5.BleStatus>);

  @override
  _i5.BleStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i5.BleStatus.unknown,
      ) as _i5.BleStatus);

  @override
  _i4.Stream<_i5.ConnectionStateUpdate> get connectedDeviceStream =>
      (super.noSuchMethod(
        Invocation.getter(#connectedDeviceStream),
        returnValue: _i4.Stream<_i5.ConnectionStateUpdate>.empty(),
      ) as _i4.Stream<_i5.ConnectionStateUpdate>);

  @override
  _i4.Stream<_i5.CharacteristicValue> get characteristicValueStream =>
      (super.noSuchMethod(
        Invocation.getter(#characteristicValueStream),
        returnValue: _i4.Stream<_i5.CharacteristicValue>.empty(),
      ) as _i4.Stream<_i5.CharacteristicValue>);

  @override
  _i5.LogLevel get logLevel => (super.noSuchMethod(
        Invocation.getter(#logLevel),
        returnValue: _i5.LogLevel.none,
      ) as _i5.LogLevel);

  @override
  set logLevel(_i5.LogLevel? logLevel) => super.noSuchMethod(
        Invocation.setter(
          #logLevel,
          logLevel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deinitialize() => (super.noSuchMethod(
        Invocation.method(
          #deinitialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<int>> readCharacteristic(
          _i5.QualifiedCharacteristic? characteristic) =>
      (super.noSuchMethod(
        Invocation.method(
          #readCharacteristic,
          [characteristic],
        ),
        returnValue: _i4.Future<List<int>>.value(<int>[]),
      ) as _i4.Future<List<int>>);

  @override
  _i4.Future<void> writeCharacteristicWithResponse(
    _i5.QualifiedCharacteristic? characteristic, {
    required List<int>? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeCharacteristicWithResponse,
          [characteristic],
          {#value: value},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> writeCharacteristicWithoutResponse(
    _i5.QualifiedCharacteristic? characteristic, {
    required List<int>? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeCharacteristicWithoutResponse,
          [characteristic],
          {#value: value},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> requestMtu({
    required String? deviceId,
    required int? mtu,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestMtu,
          [],
          {
            #deviceId: deviceId,
            #mtu: mtu,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> requestConnectionPriority({
    required String? deviceId,
    required _i5.ConnectionPriority? priority,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestConnectionPriority,
          [],
          {
            #deviceId: deviceId,
            #priority: priority,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i5.DiscoveredDevice> scanForDevices({
    required List<_i5.Uuid>? withServices,
    _i5.ScanMode? scanMode = _i5.ScanMode.balanced,
    bool? requireLocationServicesEnabled = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scanForDevices,
          [],
          {
            #withServices: withServices,
            #scanMode: scanMode,
            #requireLocationServicesEnabled: requireLocationServicesEnabled,
          },
        ),
        returnValue: _i4.Stream<_i5.DiscoveredDevice>.empty(),
      ) as _i4.Stream<_i5.DiscoveredDevice>);

  @override
  _i4.Stream<_i5.ConnectionStateUpdate> connectToDevice({
    required String? id,
    Map<_i5.Uuid, List<_i5.Uuid>>? servicesWithCharacteristicsToDiscover,
    Duration? connectionTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connectToDevice,
          [],
          {
            #id: id,
            #servicesWithCharacteristicsToDiscover:
                servicesWithCharacteristicsToDiscover,
            #connectionTimeout: connectionTimeout,
          },
        ),
        returnValue: _i4.Stream<_i5.ConnectionStateUpdate>.empty(),
      ) as _i4.Stream<_i5.ConnectionStateUpdate>);

  @override
  _i4.Stream<_i5.ConnectionStateUpdate> connectToAdvertisingDevice({
    required String? id,
    required List<_i5.Uuid>? withServices,
    required Duration? prescanDuration,
    Map<_i5.Uuid, List<_i5.Uuid>>? servicesWithCharacteristicsToDiscover,
    Duration? connectionTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connectToAdvertisingDevice,
          [],
          {
            #id: id,
            #withServices: withServices,
            #prescanDuration: prescanDuration,
            #servicesWithCharacteristicsToDiscover:
                servicesWithCharacteristicsToDiscover,
            #connectionTimeout: connectionTimeout,
          },
        ),
        returnValue: _i4.Stream<_i5.ConnectionStateUpdate>.empty(),
      ) as _i4.Stream<_i5.ConnectionStateUpdate>);

  @override
  _i4.Future<List<_i5.DiscoveredService>> discoverServices(String? deviceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #discoverServices,
          [deviceId],
        ),
        returnValue: _i4.Future<List<_i5.DiscoveredService>>.value(
            <_i5.DiscoveredService>[]),
      ) as _i4.Future<List<_i5.DiscoveredService>>);

  @override
  _i4.Future<void> discoverAllServices(String? deviceId) => (super.noSuchMethod(
        Invocation.method(
          #discoverAllServices,
          [deviceId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i3.Service>> getDiscoveredServices(String? deviceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscoveredServices,
          [deviceId],
        ),
        returnValue: _i4.Future<List<_i3.Service>>.value(<_i3.Service>[]),
      ) as _i4.Future<List<_i3.Service>>);

  @override
  _i4.Future<void> clearGattCache(String? deviceId) => (super.noSuchMethod(
        Invocation.method(
          #clearGattCache,
          [deviceId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> readRssi(String? deviceId) => (super.noSuchMethod(
        Invocation.method(
          #readRssi,
          [deviceId],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Stream<List<int>> subscribeToCharacteristic(
          _i5.QualifiedCharacteristic? characteristic) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToCharacteristic,
          [characteristic],
        ),
        returnValue: _i4.Stream<List<int>>.empty(),
      ) as _i4.Stream<List<int>>);

  @override
  _i4.Future<Iterable<_i3.Characteristic>> resolve(
          _i5.QualifiedCharacteristic? characteristic) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolve,
          [characteristic],
        ),
        returnValue: _i4.Future<Iterable<_i3.Characteristic>>.value(
            <_i3.Characteristic>[]),
      ) as _i4.Future<Iterable<_i3.Characteristic>>);

  @override
  _i4.Future<_i3.Characteristic> resolveSingle(
          _i5.QualifiedCharacteristic? characteristic) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolveSingle,
          [characteristic],
        ),
        returnValue: _i4.Future<_i3.Characteristic>.value(_FakeCharacteristic_1(
          this,
          Invocation.method(
            #resolveSingle,
            [characteristic],
          ),
        )),
      ) as _i4.Future<_i3.Characteristic>);
}
