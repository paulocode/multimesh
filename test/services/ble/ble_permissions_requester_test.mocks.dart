// Mocks generated by Mockito 5.4.6 from annotations
// in multimesh/test/services/ble/ble_permissions_requester_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_blue_plus/flutter_blue_plus.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:multimesh/services/wrap/flutter_blue_plus_mockable.dart' as _i5;
import 'package:multimesh/services/wrap/permissions.dart' as _i7;
import 'package:platform/platform.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePhySupport_1 extends _i1.SmartFake implements _i2.PhySupport {
  _FakePhySupport_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalPlatform extends _i1.Mock implements _i3.LocalPlatform {
  MockLocalPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get numberOfProcessors => (super.noSuchMethod(
        Invocation.getter(#numberOfProcessors),
        returnValue: 0,
      ) as int);

  @override
  String get pathSeparator => (super.noSuchMethod(
        Invocation.getter(#pathSeparator),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#pathSeparator),
        ),
      ) as String);

  @override
  String get operatingSystem => (super.noSuchMethod(
        Invocation.getter(#operatingSystem),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#operatingSystem),
        ),
      ) as String);

  @override
  String get operatingSystemVersion => (super.noSuchMethod(
        Invocation.getter(#operatingSystemVersion),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#operatingSystemVersion),
        ),
      ) as String);

  @override
  String get localHostname => (super.noSuchMethod(
        Invocation.getter(#localHostname),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#localHostname),
        ),
      ) as String);

  @override
  Map<String, String> get environment => (super.noSuchMethod(
        Invocation.getter(#environment),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  String get executable => (super.noSuchMethod(
        Invocation.getter(#executable),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#executable),
        ),
      ) as String);

  @override
  String get resolvedExecutable => (super.noSuchMethod(
        Invocation.getter(#resolvedExecutable),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#resolvedExecutable),
        ),
      ) as String);

  @override
  Uri get script => (super.noSuchMethod(
        Invocation.getter(#script),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#script),
        ),
      ) as Uri);

  @override
  List<String> get executableArguments => (super.noSuchMethod(
        Invocation.getter(#executableArguments),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#version),
        ),
      ) as String);

  @override
  bool get stdinSupportsAnsi => (super.noSuchMethod(
        Invocation.getter(#stdinSupportsAnsi),
        returnValue: false,
      ) as bool);

  @override
  bool get stdoutSupportsAnsi => (super.noSuchMethod(
        Invocation.getter(#stdoutSupportsAnsi),
        returnValue: false,
      ) as bool);

  @override
  String get localeName => (super.noSuchMethod(
        Invocation.getter(#localeName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#localeName),
        ),
      ) as String);

  @override
  bool get isLinux => (super.noSuchMethod(
        Invocation.getter(#isLinux),
        returnValue: false,
      ) as bool);

  @override
  bool get isMacOS => (super.noSuchMethod(
        Invocation.getter(#isMacOS),
        returnValue: false,
      ) as bool);

  @override
  bool get isWindows => (super.noSuchMethod(
        Invocation.getter(#isWindows),
        returnValue: false,
      ) as bool);

  @override
  bool get isAndroid => (super.noSuchMethod(
        Invocation.getter(#isAndroid),
        returnValue: false,
      ) as bool);

  @override
  bool get isIOS => (super.noSuchMethod(
        Invocation.getter(#isIOS),
        returnValue: false,
      ) as bool);

  @override
  bool get isFuchsia => (super.noSuchMethod(
        Invocation.getter(#isFuchsia),
        returnValue: false,
      ) as bool);

  @override
  String toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [FlutterBluePlusMockable].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterBluePlusMockable extends _i1.Mock
    implements _i5.FlutterBluePlusMockable {
  MockFlutterBluePlusMockable() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i2.BluetoothAdapterState> get adapterState => (super.noSuchMethod(
        Invocation.getter(#adapterState),
        returnValue: _i6.Stream<_i2.BluetoothAdapterState>.empty(),
      ) as _i6.Stream<_i2.BluetoothAdapterState>);

  @override
  _i6.Stream<List<_i2.ScanResult>> get scanResults => (super.noSuchMethod(
        Invocation.getter(#scanResults),
        returnValue: _i6.Stream<List<_i2.ScanResult>>.empty(),
      ) as _i6.Stream<List<_i2.ScanResult>>);

  @override
  bool get isScanningNow => (super.noSuchMethod(
        Invocation.getter(#isScanningNow),
        returnValue: false,
      ) as bool);

  @override
  _i6.Stream<bool> get isScanning => (super.noSuchMethod(
        Invocation.getter(#isScanning),
        returnValue: _i6.Stream<bool>.empty(),
      ) as _i6.Stream<bool>);

  @override
  _i2.LogLevel get logLevel => (super.noSuchMethod(
        Invocation.getter(#logLevel),
        returnValue: _i2.LogLevel.none,
      ) as _i2.LogLevel);

  @override
  _i6.Future<bool> get isSupported => (super.noSuchMethod(
        Invocation.getter(#isSupported),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<String> get adapterName => (super.noSuchMethod(
        Invocation.getter(#adapterName),
        returnValue: _i6.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.getter(#adapterName),
        )),
      ) as _i6.Future<String>);

  @override
  List<_i2.BluetoothDevice> get connectedDevices => (super.noSuchMethod(
        Invocation.getter(#connectedDevices),
        returnValue: <_i2.BluetoothDevice>[],
      ) as List<_i2.BluetoothDevice>);

  @override
  _i6.Future<List<_i2.BluetoothDevice>> get systemDevices =>
      (super.noSuchMethod(
        Invocation.getter(#systemDevices),
        returnValue: _i6.Future<List<_i2.BluetoothDevice>>.value(
            <_i2.BluetoothDevice>[]),
      ) as _i6.Future<List<_i2.BluetoothDevice>>);

  @override
  _i6.Future<List<_i2.BluetoothDevice>> get bondedDevices =>
      (super.noSuchMethod(
        Invocation.getter(#bondedDevices),
        returnValue: _i6.Future<List<_i2.BluetoothDevice>>.value(
            <_i2.BluetoothDevice>[]),
      ) as _i6.Future<List<_i2.BluetoothDevice>>);

  @override
  _i6.Future<void> startScan({
    List<_i2.Guid>? withServices = const [],
    Duration? timeout,
    Duration? removeIfGone,
    bool? oneByOne = false,
    bool? androidUsesFineLocation = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startScan,
          [],
          {
            #withServices: withServices,
            #timeout: timeout,
            #removeIfGone: removeIfGone,
            #oneByOne: oneByOne,
            #androidUsesFineLocation: androidUsesFineLocation,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> stopScan() => (super.noSuchMethod(
        Invocation.method(
          #stopScan,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void setLogLevel(
    _i2.LogLevel? level, {
    bool? color = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setLogLevel,
          [level],
          {#color: color},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> turnOn({int? timeout = 60}) => (super.noSuchMethod(
        Invocation.method(
          #turnOn,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.PhySupport> getPhySupport() => (super.noSuchMethod(
        Invocation.method(
          #getPhySupport,
          [],
        ),
        returnValue: _i6.Future<_i2.PhySupport>.value(_FakePhySupport_1(
          this,
          Invocation.method(
            #getPhySupport,
            [],
          ),
        )),
      ) as _i6.Future<_i2.PhySupport>);

  @override
  void cancelWhenScanComplete(
          _i6.StreamSubscription<List<_i2.ScanResult>>? subscription) =>
      super.noSuchMethod(
        Invocation.method(
          #cancelWhenScanComplete,
          [subscription],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Permissions].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissions extends _i1.Mock implements _i7.Permissions {
  MockPermissions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> locationWhenInUseRequest() => (super.noSuchMethod(
        Invocation.method(
          #locationWhenInUseRequest,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
